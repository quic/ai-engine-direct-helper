{
  "name": "Image Classification Inceptionv3",
  "description": "Your Hub for Text Generation.",
  "icon_bg_color": null,
  "webhook": false,
  "user_id": "a1488344-7dc1-4454-be88-c273985c0321",
  "endpoint_name": null,
  "id": "612e7f97-ad4e-49bb-abc3-7d90326b0181",
  "tags": null,
  "folder_id": "b517004f-2d96-4484-8f23-ce4e02fba862",
  "gradient": null,
  "data": {
    "nodes": [
      {
        "id": "TextInput-CFqur",
        "type": "genericNode",
        "position": {
          "x": 376,
          "y": 369
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "file_1": {
                "trace_as_metadata": true,
                "file_path": "758960ca-c047-4918-b07a-5330e564943d\\2025-03-06_16-14-47_chairs.jpg",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "file_1",
                "value": "",
                "display_name": "File 1",
                "advanced": false,
                "dynamic": false,
                "info": "File 1 to be sent with the message.",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput",
                "load_from_db": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom PIL import Image\n\nclass QualcommCVInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n    MAX_FILES = 1 \n    inputs = [\n        \n    ]\n    \n    \n        # Dynamically add multiple FileInput fields\n    for i in range(1, MAX_FILES + 1):\n        inputs.append(\n            FileInput(\n                name=f\"file_{i}\",\n                display_name=f\"File {i}\",\n                file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n                info=f\"File {i} to be sent with the message.\",\n                advanced=False,\n                is_list=False,  # Each FileInput handles a single file\n            )\n        )\n\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"message_response\"),\n    ]\n\n\n    def message_response(self) -> Message:\n        # Collect all uploaded files into a list\n        files = []\n        files_path=[]\n        for i in range(1, self.MAX_FILES + 1):\n            file = getattr(self, f\"file_{i}\", None)\n            if file:\n                \n                files.append(file)\n\n                resolved_path = self.resolve_path(file)\n                files_path.append(resolved_path)\n                # Open and read the image file\n                \n                image = Image.open(resolved_path)\n                \n                width, height = image.size\n                \n                print(f\"resolved_path: {resolved_path} , Width: {width}, Height: {height}\")\n                image.close()\n\n\n\n        message = Message(text=\"Qualcomm CV\", sender=MESSAGE_SENDER_USER, files=files_path)\n        # Update the component status\n        self.status = message\n        return message",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              }
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "Qualcomm CV Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "file_1"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.1"
          },
          "type": "TextInput",
          "id": "TextInput-CFqur"
        },
        "selected": false,
        "width": 320,
        "height": 230
      },
      {
        "id": "ChatOutput-Z2OWR",
        "type": "genericNode",
        "position": {
          "x": 1308,
          "y": 515
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "background_color": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "background_color",
                "value": "",
                "display_name": "Background Color",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The background color of the icon.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "chat_icon": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chat_icon",
                "value": "",
                "display_name": "Icon",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The icon of the message.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, _id: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if _id:\n            source_dict[\"id\"] = _id\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    def message_response(self) -> Message:\n        _source, _icon, _display_name, _source_id = self.get_properties_from_source_component()\n        _background_color = self.background_color\n        _text_color = self.text_color\n        if self.chat_icon:\n            _icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(_source_id, _display_name, _source)\n        message.properties.icon = _icon\n        message.properties.background_color = _background_color\n        message.properties.text_color = _text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data_template",
                "value": "{text}",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "sender": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "AI",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "text_color": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_color",
                "value": "",
                "display_name": "Text Color",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The text color of the name",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "MessagesSquare",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "outputs",
            "key": "ChatOutput",
            "score": 0.00012027401062119145,
            "lf_version": "1.1.1"
          },
          "type": "ChatOutput",
          "id": "ChatOutput-Z2OWR"
        },
        "selected": false,
        "width": 320,
        "height": 232,
        "dragging": false
      },
      {
        "id": "CustomComponent-QLy9Y",
        "type": "genericNode",
        "position": {
          "x": 848.8040862656073,
          "y": 337.7981838819523
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# from langflow.field_typing import Data\nfrom langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.schema.content_block import ContentBlock\nfrom langflow.schema.content_types import TextContent, MediaContent\nimport socket\nimport sys\nimport subprocess\n\nclass CustomComponent(Component):\n    display_name = \"Custom Component\"\n    description = \"Use as a template to create your own component.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"code\"\n    name = \"CustomComponent\"\n\n    inputs = [\n                MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n\n        MessageInput(\n            name=\"message\",\n            display_name=\"Message\",\n            info=\"The Message object from ChatInput\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Output\", name=\"output\", method=\"build_output\"),\n    ]\n    \n    def get_host_ip(self):\n        host_name=socket.gethostname()\n        ip_addr=socket.gethostbyname(host_name)\n        return ip_addr  \n\n    def build_output(self) -> Message:\n\n\n\n\n        image_path_list=[]\n        \n        \n        for file in self.message.files:\n            image_path=str(file.path)\n            image_path_list.append(image_path)\n            \n        print(f'image_path_list: {image_path_list}')\n    \n        original_cwd = os.getcwd()\n        \n\n        # Extract the file name and directory\n        directory, filename = os.path.split(image_path)\n        name, ext = os.path.splitext(filename)\n        output_filename = f\"{name}_inceptionv3_output.png\"\n        \n        # Create new file name\n        output_image_path = os.path.join(directory, output_filename)\n\n\n\n        user_folder_path = os.environ['USERPROFILE']\n        ai_helper_sample_path = os.path.join(original_cwd, '..\\\\ai-engine-direct-helper\\\\samples\\\\')\n        os.chdir(ai_helper_sample_path)\n        sys.path.append(ai_helper_sample_path)\n        from python.inception_v3.inception_v3 import main as inception_v3_main\n        #image_path=None,mask_path=None,output_path=None\n        result=inception_v3_main(input=image_path_list[0])            \n        #result='Hello'\n        print(f'{result}')\n        result_list=[]\n        result_list.append(result)\n        sys.path.remove(ai_helper_sample_path)\n\n    \n        os.chdir(original_cwd)\n\n\n\n    \n        url_list=[]\n        for each_item in image_path_list:\n            directory, filename = os.path.split(each_item)\n            url_list.append(f'http://{self.get_host_ip()}:8979/api/v1/files/images/{self.graph.flow_id}/{filename}')\n\n\n\n        \n        print(f'url_list: {url_list}')\n        content_blocks=[]\n        \n        for url,infer_result in zip(url_list,result_list):\n            \n            content_blocks.append(\n                ContentBlock(\n                title=\"Input Image\",\n                contents=[\n                MediaContent(type=\"media\", urls=[url])\n                ]\n                )\n            )\n            \n            content_blocks.append(\n                ContentBlock(\n                    title=\"Inference result\",\n                    contents=[\n                    TextContent(type=\"text\", text=infer_result)\n                    ]\n                )\n            )\n\n        message = Message(\n            text=\"This is the Inception Inference  result\",\n            sender=\"User\",\n            sender_name=\"Qualcomm AI\",\n            content_blocks=content_blocks\n        )\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "message",
                "value": "",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The Message object from ChatInput",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              }
            },
            "description": "Use as a template to create your own component.",
            "icon": "code",
            "base_classes": [
              "Message"
            ],
            "display_name": "InceptionV3",
            "documentation": "http://docs.langflow.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "output",
                "display_name": "Output",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "message"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false
          },
          "type": "CustomComponent",
          "id": "CustomComponent-QLy9Y"
        },
        "selected": true,
        "width": 320,
        "height": 337,
        "dragging": false,
        "positionAbsolute": {
          "x": 848.8040862656073,
          "y": 337.7981838819523
        }
      }
    ],
    "edges": [
      {
        "source": "TextInput-CFqur",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-CFqurœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-QLy9Y",
        "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œCustomComponent-QLy9Yœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "message",
            "id": "CustomComponent-QLy9Y",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-CFqur",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-TextInput-CFqur{œdataTypeœ:œTextInputœ,œidœ:œTextInput-CFqurœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-QLy9Y{œfieldNameœ:œmessageœ,œidœ:œCustomComponent-QLy9Yœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": "",
        "animated": false,
        "selected": false
      },
      {
        "source": "CustomComponent-QLy9Y",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-QLy9Yœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-Z2OWR",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-Z2OWRœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-Z2OWR",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-QLy9Y",
            "name": "output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-QLy9Y{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-QLy9Yœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-Z2OWR{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-Z2OWRœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": "",
        "animated": false,
        "selected": false
      }
    ],
    "viewport": {
      "x": -518.844031367993,
      "y": -276.4595771314447,
      "zoom": 1.6555329654371187
    }
  },
  "is_component": false,
  "updated_at": "2025-03-22T15:15:22+00:00",
  "icon": null
}